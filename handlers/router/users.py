from aiogram import Router
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart
from app.models import User
from app.database import SessionLocal
import app.keyboards as kb
from sqlalchemy.exc import SQLAlchemyError, IntegrityError
import logging

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

user_router = Router()

@user_router.message(CommandStart())
async def cmd_start(message: Message):
    first_name = message.from_user.first_name
    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {first_name}üëã\n–†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å! –Ø - —á–∞—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–≤–µ—â–∞–Ω–∏–π. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º!", reply_markup=kb.start_keyboard())

@user_router.callback_query(lambda c: c.data == "start_bot")
async def handle_start_bot(callback: CallbackQuery):
    telegram_id = callback.from_user.id
    username = callback.from_user.username or ''
    first_name = callback.from_user.first_name or ''  

    session = SessionLocal()
    try:
        user = session.query(User).filter(User.telegram_id == telegram_id).first() 
        if user:
            if user.deleted_flag == 1:
                await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            else:
                await callback.message.answer(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å:\n–ò–º—è: {first_name}\nUsername: {username}\nTelegram ID: {telegram_id}")
                if user.role == 'admin':
                    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.admin_keyboard())
                else:
                    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.guest_keyboard())
        else:
            new_user = User(
                telegram_id=telegram_id,
                username=username,
                first_name=first_name, 
                role=None,
                deleted_flag=0
            )
            session.add(new_user)
            session.commit()

            await callback.message.answer(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å:\n–ò–º—è: {first_name}\nUsername: {username}\nTelegram ID: {telegram_id}\n")
            await callback.message.answer("–£—Ç–æ—á–Ω—è—é. –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –Ω–∞—á–∞–ª—å–Ω–∏–∫–æ–º –∏–ª–∏ –µ–≥–æ –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª–µ–º?", reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text="–î–∞", callback_data="role_admin"),
                        InlineKeyboardButton(text="–ù–µ—Ç", callback_data="role_guest")
                    ]
                ]
            ))
    except IntegrityError as e:
        logger.error(f"IntegrityError: {str(e)}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except SQLAlchemyError as e:
        logger.error(f"SQLAlchemyError: {str(e)}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"Unexpected error: {str(e)}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        session.close()

@user_router.callback_query(lambda c: c.data in ["role_admin", "role_guest"])
async def handle_role(callback: CallbackQuery):
    telegram_id = callback.from_user.id
    role = 'admin' if callback.data == 'role_admin' else 'guest'

    session = SessionLocal()
    try:
        user = session.query(User).filter(User.telegram_id == telegram_id).first()
        if user:
            if user.role is None:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ —É–∂–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ —Ä–æ–ª–∏
                user.role = role
                session.commit()
                if role == 'admin':
                    await callback.message.answer(f"–í–∞—à–∞ —Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞")
                    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.admin_keyboard())
                else:
                    await callback.message.answer(f"–í–∞—à–∞ —Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
                    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.guest_keyboard())
                
                # –°–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
               # await callback.message.edit_reply_markup(reply_markup=None)
            else:
                await callback.message.answer("–í—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ —Ä–æ–ª–∏.")
    except IntegrityError as e:
        logger.error(f"IntegrityError: {str(e)}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except SQLAlchemyError as e:
        logger.error(f"SQLAlchemyError: {str(e)}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"Unexpected error: {str(e)}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        session.close()