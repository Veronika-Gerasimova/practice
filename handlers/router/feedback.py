from aiogram import Router
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from sqlalchemy.orm import Session
from app.database import SessionLocal
from app.models import Feedback, User
from sqlalchemy.exc import SQLAlchemyError, IntegrityError
import logging

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

guest_router = Router()
admin_router = Router()

class FeedbackStates(StatesGroup):
    waiting_for_feedback = State()

class AdminFeedbackStates(StatesGroup):
    waiting_for_response = State()

@guest_router.message(lambda message: message.text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def request_feedback(message: Message, state: FSMContext):
    await message.answer("üü¢ –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å: ")
    await state.set_state(FeedbackStates.waiting_for_feedback)

@guest_router.message(FeedbackStates.waiting_for_feedback)
async def receive_feedback(message: Message, state: FSMContext):
    session: Session = SessionLocal()
    try:
        user = session.query(User).filter(User.telegram_id == message.from_user.id).first()
        if user:
            feedback = Feedback(user_id=user.id, message=message.text)
            if message.text is None:
                await message.bot.send_message(message.from_user.id, '–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
                return None
            session.add(feedback)
            session.commit()
            await message.answer("üü¢ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å!\n–í–∞–º –æ—Ç–≤–µ—Ç—è—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º –≤–æ–ø—Ä–æ—Å–µ
            admins = session.query(User).filter(User.role == "admin").all()
            for admin in admins:
                inline_kb = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"respond_feedback_{feedback.id}")]
                ])
                await message.bot.send_message(admin.telegram_id, f"üü¢ –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç {user.first_name}: {message.text}", reply_markup=inline_kb)
        else:
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except IntegrityError as e: 
        logger.error(f"IntegrityError: {str(e)}") 
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.") 
    except SQLAlchemyError as e: 
        logger.error(f"SQLAlchemyError: {str(e)}") 
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.") 
    except Exception as e: 
        logger.error(f"Unexpected error: {str(e)}") 
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}") 
    finally: 
        session.close()
    await state.clear()

@admin_router.message(lambda message: message.text == "–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã")
async def show_feedback_list(message: Message):
    session: Session = SessionLocal()
    try:
        feedbacks = session.query(Feedback).filter(Feedback.answered == 0).all() 
        if not feedbacks:
            await message.answer("‚ùå –ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")
            return

        inline_kb = InlineKeyboardMarkup(inline_keyboard=[])
        for feedback in feedbacks:
            user = session.query(User).filter(User.id == feedback.user_id).first()
            button_text = f"{user.first_name}: {feedback.message[:20]}..."
            button = InlineKeyboardButton(text=button_text, callback_data=f"respond_feedback_{feedback.id}")
            inline_kb.inline_keyboard.append([button])

        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞:", reply_markup=inline_kb)
    except SQLAlchemyError as e: 
        logger.error(f"SQLAlchemyError: {str(e)}") 
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.") 
    except Exception as e: 
        logger.error(f"Unexpected error: {str(e)}") 
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}") 
    finally:
        session.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –±—ã–ª –ª–∏ —É–∂–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
async def check_if_answered(session: Session, feedback_id: int) -> bool:
    feedback = session.query(Feedback).filter(Feedback.id == feedback_id).first()
    return feedback.answered

@admin_router.callback_query(lambda c: c.data.startswith("respond_feedback_"))
async def ask_for_response(callback: CallbackQuery, state: FSMContext):
    feedback_id = int(callback.data.split("_")[2])

    session: Session = SessionLocal()
    try:
        if await check_if_answered(session, feedback_id):
            await callback.message.answer("–í—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.")
        else:
            await state.update_data(feedback_id=feedback_id)
            await callback.message.answer("üü¢ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å.")
            await state.set_state(AdminFeedbackStates.waiting_for_response)
    except SQLAlchemyError as e: 
        logger.error(f"SQLAlchemyError: {str(e)}") 
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.") 
    except Exception as e: 
        logger.error(f"Unexpected error: {str(e)}") 
        await callback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}") 
    finally:
        session.close()

@admin_router.message(AdminFeedbackStates.waiting_for_response)
async def send_response(message: Message, state: FSMContext):
    session: Session = SessionLocal()
    data = await state.get_data()
    feedback_id = data.get('feedback_id')

    try:
        feedback = session.query(Feedback).filter(Feedback.id == feedback_id).first()
        if feedback:
            user = session.query(User).filter(User.id == feedback.user_id).first()
            if user:
                await message.bot.send_message(user.telegram_id, f"‚ùî '{feedback.message}'\n‚ùï {message.text}")
                await message.answer("üü¢ –í–∞—à –æ—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
                #session.delete(feedback)
                feedback.answered = 1
                session.commit()
            else:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            await message.answer("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except SQLAlchemyError as e: 
        logger.error(f"SQLAlchemyError: {str(e)}") 
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.") 
    except Exception as e: 
        logger.error(f"Unexpected error: {str(e)}") 
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}") 
    finally:
        session.close()
    await state.clear()